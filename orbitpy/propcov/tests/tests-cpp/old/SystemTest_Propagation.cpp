//------------------------------------------------------------------------------
//                               SystemTest_Propagate
//------------------------------------------------------------------------------
// GMAT: General Mission Analysis Tool
//
// Author: Wendy Shoan
// Created: 2016.05.31
//
/**
 * System tester for propagation
 */
//------------------------------------------------------------------------------

#include <iostream>
#include <string>
#include <ctime>
#include <cmath>
#include "gmatdefs.hpp"
#include "GmatConstants.hpp"
#include "Rvector6.hpp"
#include "Rvector3.hpp"
#include "Rmatrix.hpp"
#include "RealUtilities.hpp"
#include "MessageInterface.hpp"
#include "ConsoleMessageReceiver.hpp"
#include "AbsoluteDate.hpp"
#include "Spacecraft.hpp"
#include "Earth.hpp"
#include "KeyValueStatistics.hpp"
#include "VisiblePOIReport.hpp"
#include "OrbitState.hpp"
#include "PointGroup.hpp"
#include "Propagator.hpp"
#include "ConicalSensor.hpp"
#include "CoverageChecker.hpp"
#include "TimeTypes.hpp"


using namespace std;
using namespace GmatMathUtil;
using namespace GmatMathConstants;

//------------------------------------------------------------------------------
// int main(int argc, char *argv[])
//------------------------------------------------------------------------------
int main(int argc, char *argv[])
{
   std::string outFormat = "%16.9f ";
   Real        tolerance = 1e-15;
   
   ConsoleMessageReceiver *consoleMsg = ConsoleMessageReceiver::Instance();
   MessageInterface::SetMessageReceiver(consoleMsg);
   std::string outPath = "./";
   MessageInterface::SetLogFile(outPath + "GmatLog.txt");
   MessageInterface::ShowMessage("%s\n",
                                 GmatTimeUtil::FormatCurrentTime().c_str());
   
   // Set global format setting
   GmatGlobal *global = GmatGlobal::Instance();
   global->SetActualFormat(false, false, 16, 1, false);
   
   char *buffer = NULL;
   buffer = getenv("OS");
   if (buffer  != NULL)
   {
      MessageInterface::ShowMessage("Current OS is %s\n", buffer);
   }
   else
   {
      MessageInterface::ShowMessage("Buffer is NULL\n");
   }
   
   MessageInterface::ShowMessage("*** START TEST ***\n");
   
   AbsoluteDate *date   = NULL;
   OrbitState   *state  = NULL;
   Spacecraft   *sat1   = NULL;

   Real initialJD = 2457473.00;
   Real SMA = 6500;
   Real ECC = 0.002;
   Real INC = 45.0*RAD_PER_DEG;
   Real RAAN = 75.0*RAD_PER_DEG;
   Real AOP = 10.0*RAD_PER_DEG;
   Real TA = 270.0*RAD_PER_DEG;
   
   try
   {
      // Test the PointGroup
      MessageInterface::ShowMessage("*** TEST*** Propagate!!!!\n");
      
      clock_t t0 = clock();
      for (Integer ii = 0; ii < 1; ii++)
      {
         // Create the epoch object and set the initial epoch
         date = new AbsoluteDate();
		 date->SetJulianDate(initialJD);
         
         MessageInterface::ShowMessage("--- date created\n");
         
         // Create the spacecraft state object and set Keplerian elements
         state = new OrbitState();
         state->SetKeplerianState(SMA, ECC, INC, RAAN, AOP, TA);
         
         MessageInterface::ShowMessage("--- state created\n");
         
         // Create a spacecraft giving it a state and epoch
         sat1 = new Spacecraft(date,state);
         
         MessageInterface::ShowMessage("--- spacecraft created\n");
         
         // Create the propagator
         Propagator prop(sat1);
         
         MessageInterface::ShowMessage("--- propagator created\n");
         
         // Propagate for a duration and collect data
   //      Real    startDate = date.GetJulianDate();
   //      MessageInterface::ShowMessage("Before propagation, julian date = %12.10f\n",
   //                                    startDate);
   //      Integer count = 0;
         for (Integer stepIdx = 0; stepIdx < 86400/60; stepIdx++) // = 1:86400/60
         {
            // Propagate
            date->Advance(60.0);
   //         MessageInterface::ShowMessage("In iteration %d, julian date = %12.10f\n",
   //                                       stepIdx, date.GetJulianDate());
            prop.Propagate(*date);
         }
      }
      Real timeSpent = ((Real) (clock() - t0)) / CLOCKS_PER_SEC;
      MessageInterface::ShowMessage("TIME SPENT in 20 iterations is %12.10f seconds\n",
                                    timeSpent);
      
      // Comparison against truth below this line
      OrbitState   *orbState = sat1->GetOrbitState();
//      AbsoluteDate  orbEpoch = sat1.GetOrbitEpoch();
//      Real          jDate    = orbEpoch.GetJulianDate();
//      Rvector6      gregDate = orbEpoch.GetGregorianDate();
      Rvector6      kepState = orbState->GetKeplerianState();
      for (Integer ii = 2; ii < 6; ii++)
         kepState(ii) *= DEG_PER_RAD;
      
      //This is generated by this propagator but agrees very well with STK J2
      // analytic propagator
      Rvector6 truthData(6500.0,0.002, 45.0,
                    68.4059136572242, 16.9940847530552, 116.731954192478);
      
      bool errorInProp = false;
      for (Integer ii = 0; ii < 6; ii++)
      {
//         MessageInterface::ShowMessage("   kepState(%d)  = %12.10f\n",
//                                       ii, kepState(ii));
//         MessageInterface::ShowMessage("   truthData(%d) = %12.10f\n",
//                                       ii, truthData(ii));
         if (Abs(kepState(ii) - truthData(ii)) > 1.0e-9)
         {
            errorInProp = true;
            MessageInterface::ShowMessage("Error in J2 Analytic Propagation!\n");
			MessageInterface::ShowMessage("Truth Component  %16.12f\n", truthData[ii]);
			MessageInterface::ShowMessage("Result Component %16.12f\n", kepState[ii]);
         }
      }
      if (!errorInProp)
         MessageInterface::ShowMessage("OK - J2 propagation is OK!!!\n");

	  MessageInterface::ShowMessage("Truth SMA  %12.10f\n", truthData[0]);
	  MessageInterface::ShowMessage("Truth ECC  %12.10f\n", truthData[1]);
	  MessageInterface::ShowMessage("Truth INC  %12.10f\n", truthData[2] );
	  MessageInterface::ShowMessage("Truth RAAN %12.10f\n", truthData[3]);
	  MessageInterface::ShowMessage("Truth AOP  %12.10f\n", truthData[4]);
	  MessageInterface::ShowMessage("Truth TA   %12.10f\n", truthData[5]);

	  MessageInterface::ShowMessage("Result SMA  %12.10f\n", kepState[0]);
	  MessageInterface::ShowMessage("Result ECC  %12.10f\n", kepState[1]);
	  MessageInterface::ShowMessage("Result INC  %12.10f\n", kepState[2]);
	  MessageInterface::ShowMessage("Result RAAN %12.10f\n", kepState[3]);
	  MessageInterface::ShowMessage("Result AOP  %12.10f\n", kepState[4]);
	  MessageInterface::ShowMessage("Result TA   %12.10f\n", kepState[5]);

	  /// ---------------------------------------------------------------------
	  /// Now test propgation with drag included
	  /// ---------------------------------------------------------------------
	  AbsoluteDate *date2 = NULL;
	  OrbitState   *state2 = NULL;
	  Spacecraft   *sat2 = NULL;

	  date2 = new AbsoluteDate();
	  date2->SetJulianDate(initialJD);

	  state2 = new OrbitState();
	  state2->SetKeplerianState(6700.0, ECC, 0.0, 0.0, 260.80535373076, 99.88774933207917);

	  // Create a spacecraft giving it a state and epoch
	  sat2 = new Spacecraft(date2, state2);
	  sat2->SetDragArea(2.55);
	  sat2->SetDragCoefficient(1.7);
	  sat2->SetTotalMass(124);

	  Propagator prop2(sat2);
	  prop2.SetApplyDrag(true);

	  //date->Advance(272881.85875455);
	  //prop2.Propagate(*date);

	  for (Integer stepIdx = 0; stepIdx < 2274; stepIdx++) // = 1:86400/60
	  {
		  date2->Advance(120.0);
		  prop2.Propagate(*date2);
	  }

	  orbState = sat2->GetOrbitState();
	  kepState = orbState->GetKeplerianState();
	  for (Integer ii = 2; ii < 6; ii++)
		  kepState(ii) *= DEG_PER_RAD;
	  MessageInterface::ShowMessage("Drag Propagation Results!\n");
	  MessageInterface::ShowMessage("Result SMA  %12.10f\n", kepState[0]);
	  MessageInterface::ShowMessage("Result ECC  %12.10f\n", kepState[1]);
	  MessageInterface::ShowMessage("Result INC  %12.10f\n", kepState[2]);
	  MessageInterface::ShowMessage("Result RAAN %12.10f\n", kepState[3]);
	  MessageInterface::ShowMessage("Result AOP  %12.10f\n", kepState[4]);
	  MessageInterface::ShowMessage("Result TA   %12.10f\n", kepState[5]);

      
      cout << endl;
      cout << "Hit enter to end" << endl;
      cin.get();
      
      delete date, date2;
      delete state, state2;
      delete sat1, sat2;

      MessageInterface::ShowMessage("*** END TEST ***\n");
   }
   catch (BaseException &be)
   {
      MessageInterface::ShowMessage("Exception caught: %s\n", be.GetFullMessage().c_str());
   }
   
}
