""" In this script the performance of the `DirectSphericalPIP` (which uses `propcov.DSPIPCustomSensor`) and 
    the `ProjectedPIP` (which uses the `propcov.GMATCustomSensor`) coverage methods are compared. 
"""
import time
import os, shutil

from orbitpy.util import OrbitState, Spacecraft
from orbitpy.propagator import J2AnalyticalPropagator
from orbitpy.coveragecalculator import GridCoverage
from orbitpy.grid import Grid

wdir = os.path.dirname(os.path.realpath(__file__)) + "/../examples/direct_vs_projected_coverage/"

epoch_dict = {"@type":"GREGORIAN_UT1", "year":2020, "month":1, "day":1, "hour":12, "minute":0, "second":0}
epoch = OrbitState.date_from_dict(epoch_dict)
epoch_JDUt1 = epoch.GetJulianDate()


sat = Spacecraft.from_dict({"spacecraftBus":{"orientation":{"referenceFrame": "NADIR_POINTING", "convention": "REF_FRAME_ALIGNED"}
                                            },
                             "orbitState": {"date": {"@type":"GREGORIAN_UT1", "year":2019, "month":12, "day":31, "hour":18, "minute":32, "second":15.461952},
                                            "state":{"@type": "KEPLERIAN_EARTH_CENTERED_INERTIAL", "sma": 7060.468, "ecc": 0.00016890, "inc": 98.1228, "raan": 9.7929, "aop": 109.2526, "ta": 250.8855}
                                        },
                             "instrument": { "orientation": {"referenceFrame": "SC_BODY_FIXED", "convention": "XYZ", "xRotation":2.5, "yRotation":-7.5, "zRotation":10},
                                            "fieldOfViewGeometry": {"shape": "Rectangular", "angleHeight":80, "angleWidth": 80},
                                            "@type":"Basic Sensor"}
                                    })
'''
sat = Spacecraft.from_dict({"spacecraftBus":{"orientation":{"referenceFrame": "NADIR_POINTING", "convention": "REF_FRAME_ALIGNED"}
                                            },
                             "orbitState": {"date": {"@type":"GREGORIAN_UT1", "year":2019, "month":12, "day":31, "hour":18, "minute":32, "second":15.461952},
                                            "state":{"@type": "KEPLERIAN_EARTH_CENTERED_INERTIAL", "sma": 7060.468, "ecc": 0.00016890, "inc": 98.1228, "raan": 9.7929, "aop": 109.2526, "ta": 250.8855}
                                        },
                             "instrument": { "orientation": {"referenceFrame": "SC_BODY_FIXED", "convention": "XYZ", "xRotation":2.5, "yRotation":-7.5, "zRotation":10},
                                            "fieldOfViewGeometry": {"shape": "CUSTOM", "customConeAnglesVector": [0.52359877559, 0.52359877559, 0.52359877559, 0.52359877559, 0.52359877559, 0.52359877559, 0.52359877559, 0.52359877559, 0.52359877559, 0.52359877559, 
                                                                                                                  0.52359877559, 0.52359877559, 0.52359877559, 0.52359877559, 0.52359877559, 0.52359877559, 0.52359877559, 0.52359877559, 0.52359877559, 0.52359877559], 
                                                                                        "customClockAnglesVector": [0, 0.330693963535768, 0.661387927071536, 0.992081890607304, 1.32277585414307,
                                                                                                                     1.65346981767884, 1.98416378121461, 2.31485774475038, 2.64555170828614, 2.97624567182191,
                                                                                                                     3.30693963535768, 3.63763359889345, 3.96832756242922, 4.29902152596499, 4.62971548950075, 
                                                                                                                     4.96040945303652, 5.29110341657229, 5.62179738010806, 5.95249134364382, 0]},
                                            "@type":"Basic Sensor"}
                                    })


sat = Spacecraft.from_dict({"spacecraftBus":{"orientation":{"referenceFrame": "NADIR_POINTING", "convention": "REF_FRAME_ALIGNED"}
                                            },
                             "orbitState": {"date": {"@type":"GREGORIAN_UT1", "year":2019, "month":12, "day":31, "hour":18, "minute":32, "second":15.461952},
                                            "state":{"@type": "KEPLERIAN_EARTH_CENTERED_INERTIAL", "sma": 7060.468, "ecc": 0.00016890, "inc": 98.1228, "raan": 9.7929, "aop": 109.2526, "ta": 250.8855}
                                        },
                             "instrument": { "orientation": {"referenceFrame": "SC_BODY_FIXED", "convention": "XYZ", "xRotation":0, "yRotation":0, "zRotation":0},
                                            "fieldOfViewGeometry": {"shape": "CUSTOM", "customConeAnglesVector": [0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.848230016,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.809832773,
0.848230016
], 
                                                                                        "customClockAnglesVector": [-1.064650844,
-1.047197551,
-1.029744259,
-1.012290966,
-0.994837674,
-0.977384381,
-0.959931089,
-0.942477796,
-0.925024504,
-0.907571211,
-0.890117919,
-0.872664626,
-0.855211333,
-0.837758041,
-0.820304748,
-0.802851456,
-0.785398163,
-0.767944871,
-0.750491578,
-0.733038286,
-0.715584993,
-0.698131701,
-0.680678408,
-0.663225116,
-0.645771823,
-0.628318531,
-0.610865238,
-0.593411946,
-0.575958653,
-0.558505361,
-0.541052068,
-0.523598776,
-0.506145483,
-0.488692191,
-0.471238898,
-0.453785606,
-0.436332313,
-0.41887902,
-0.401425728,
-0.383972435,
-0.366519143,
-0.34906585,
-0.331612558,
-0.314159265,
-0.296705973,
-0.27925268,
-0.261799388,
-0.244346095,
-0.226892803,
-0.20943951,
-0.191986218,
-0.174532925,
-0.157079633,
-0.13962634,
-0.122173048,
-0.104719755,
-0.087266463,
-0.06981317,
-0.052359878,
-0.034906585,
-0.017453293,
0,
0.017453293,
0.034906585,
0.052359878,
0.06981317,
0.087266463,
0.104719755,
0.122173048,
0.13962634,
0.157079633,
0.174532925,
0.191986218,
0.20943951,
0.226892803,
0.244346095,
0.261799388,
0.27925268,
0.296705973,
0.314159265,
0.331612558,
0.34906585,
0.366519143,
0.383972435,
0.401425728,
0.41887902,
0.436332313,
0.453785606,
0.471238898,
0.488692191,
0.506145483,
0.523598776,
0.541052068,
0.558505361,
0.575958653,
0.593411946,
0.610865238,
0.628318531,
0.645771823,
0.663225116,
0.680678408,
0.698131701,
0.715584993,
0.733038286,
0.750491578,
0.767944871,
0.785398163,
0.802851456,
0.820304748,
0.837758041,
0.855211333,
0.872664626,
0.890117919,
0.907571211,
0.925024504,
0.942477796,
0.959931089,
0.977384381,
0.994837674,
1.012290966,
1.012290966,
0.994837674,
0.977384381,
0.959931089,
0.942477796,
0.925024504,
0.907571211,
0.890117919,
0.872664626,
0.855211333,
0.837758041,
0.820304748,
0.802851456,
0.785398163,
0.767944871,
0.750491578,
0.733038286,
0.715584993,
0.698131701,
0.680678408,
0.663225116,
0.645771823,
0.628318531,
0.610865238,
0.593411946,
0.575958653,
0.558505361,
0.541052068,
0.523598776,
0.506145483,
0.488692191,
0.471238898,
0.453785606,
0.436332313,
0.41887902,
0.401425728,
0.383972435,
0.366519143,
0.34906585,
0.331612558,
0.314159265,
0.296705973,
0.27925268,
0.261799388,
0.244346095,
0.226892803,
0.20943951,
0.191986218,
0.174532925,
0.157079633,
0.13962634,
0.122173048,
0.104719755,
0.087266463,
0.06981317,
0.052359878,
0.034906585,
0.017453293,
0,
-0.017453293,
-0.034906585,
-0.052359878,
-0.06981317,
-0.087266463,
-0.104719755,
-0.122173048,
-0.13962634,
-0.157079633,
-0.174532925,
-0.191986218,
-0.20943951,
-0.226892803,
-0.244346095,
-0.261799388,
-0.27925268,
-0.296705973,
-0.314159265,
-0.331612558,
-0.34906585,
-0.366519143,
-0.383972435,
-0.401425728,
-0.41887902,
-0.436332313,
-0.453785606,
-0.471238898,
-0.488692191,
-0.506145483,
-0.523598776,
-0.541052068,
-0.558505361,
-0.575958653,
-0.593411946,
-0.610865238,
-0.628318531,
-0.645771823,
-0.663225116,
-0.680678408,
-0.698131701,
-0.715584993,
-0.733038286,
-0.750491578,
-0.767944871,
-0.785398163,
-0.802851456,
-0.820304748,
-0.837758041,
-0.855211333,
-0.872664626,
-0.890117919,
-0.907571211,
-0.925024504,
-0.942477796,
-0.959931089,
-0.977384381,
-0.994837674,
-1.012290966,
-1.029744259,
-1.047197551,
-1.064650844,
-1.064650844
]},
                                            "@type":"Basic Sensor"}
                                    })
'''
duration = [5, 10] # mins
grid_res = [1, 0.5, 0.25, 0.1, 0.05] # deg
duration = [5] # mins
grid_res = [0.05] # deg

for d in duration:

    propagator = J2AnalyticalPropagator.from_dict({"@type": "J2 ANALYTICAL PROPAGATOR", "stepSize": 1})
    _dur = (1.0/24)*(d/60.0)

    sat_dir = wdir + '/sat/'

    if os.path.exists(sat_dir):
        shutil.rmtree(sat_dir)
    os.makedirs(sat_dir)

    # do propagation
    sim_start_date = OrbitState.date_from_dict({"@type":"JULIAN_DATE_UT1", "jd": epoch_JDUt1})
    state_cart_file = sat_dir + 'state_cartesian_'+ str(d) + 'mins.csv'
    state_kep_file = sat_dir + 'state_keplerian_'+ str(d) + 'mins.csv'

    print("start propagation")
    propagator.execute(sat, sim_start_date, state_cart_file, state_kep_file, _dur)
    print('finished propagation')

    for g in grid_res:

        print('duration set to {} mins'.format(d))
        print('grid resolution set to {} deg'.format(g))

        grid = Grid.from_dict({"@type": "autogrid", "@id": 1, "latUpper":90, "latLower":-90, "lonUpper":180, "lonLower":-180, "gridRes": g})
        grid.write_to_file(wdir + 'grid_' + str(d) + 'mins_' + str(g) + 'deg.csv')    
        
        print("start DirectSphericalPIP coverage")
        start_time = time.process_time()  
        acc_fl = sat_dir + 'access_' + str(d) + 'mins_' + str(g) + 'deg.csv'
        cov_calc = GridCoverage(grid=grid, spacecraft=sat, state_cart_file=state_cart_file)
        x = cov_calc.execute(instru_id=None, mode_id=None, use_field_of_regard=False, out_file_access=acc_fl, mid_access_only=False, method='DirectSphericalPIP')
        print('finished DirectSphericalPIP coverage, time taken: {}s'.format(time.process_time() - start_time))

        
        print("start RectangularPIP coverage")
        start_time = time.process_time()  
        acc_fl = sat_dir + 'access_' + str(d) + 'mins_' + str(g) + 'deg.csv'
        cov_calc = GridCoverage(grid=grid, spacecraft=sat, state_cart_file=state_cart_file)
        x = cov_calc.execute(instru_id=None, mode_id=None, use_field_of_regard=False, out_file_access=acc_fl, mid_access_only=False, method='DirectSphericalPIP')
        print('finished RectangularPIP coverage, time taken: {}s'.format(time.process_time() - start_time))
        

        print("start ProjectedPIP coverage")
        start_time = time.process_time()  
        acc_fl = sat_dir + 'access_' + str(d) + 'mins_' + str(g) + 'deg.csv'
        cov_calc = GridCoverage(grid=grid, spacecraft=sat, state_cart_file=state_cart_file)
        x = cov_calc.execute(instru_id=None, mode_id=None, use_field_of_regard=False, out_file_access=acc_fl, mid_access_only=False, method='ProjectedPIP')
        print('finished ProjectedPIP coverage, time taken: {}s'.format(time.process_time() - start_time))
